<?php

/**
 * @file
 * Short_answer questions install file.
 */

/**
 * Implements hook_install().
 */
function short_answer_install() {
  // Add body field to short answer node.
  quiz_question_add_body_field('short_answer');
}

/**
 * Implements hook_schema().
 */
function short_answer_schema() {
  // Properties for a question nodes go in here:
  $schema['quiz_short_answer_node_properties'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'maximum_score' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      // One of (0) textfield and (1) textarea.
      'text_entry_type' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      // One of exact (0), case insensitive (1), regex (2), manual (3).
      'correct_answer_evaluation' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      // Correct answer.
      'correct_answer' => array(
        'type' => 'text',
      ),
      // Feedback if answer is correct.
      'feedback_correct' => array(
        'type' => 'text',
      ),
      // Feedback if answer is incorrect.
      'feedback_incorrect' => array(
        'type' => 'text',
      ),
    ),
    'primary key' => array('nid', 'vid'),
  );

  // User answers go in here.
  $schema['quiz_short_answer_user_answers'] = array(
    'fields' => array(
      'answer_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'result_answer_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'score' => array(
        'type' => 'float',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      // This may be set to false if manual scoring is used.
      'is_evaluated' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'answer' => array(
        'type' => 'text',
      ),
      'answer_feedback' => array(
        'type' => 'text',
      ),
      'answer_feedback_format' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
    ),
    'primary key' => array('answer_id'),
    'unique keys' => array(
      'result_answer_id' => array('result_answer_id'),
    ),
  );
  return $schema;
}

/**
 * Move book settings from variables to config.
 */
function short_answer_update_1000() {
  // Migrate variables to config.
  $config = config('short_answer.settings');
  $config->set('node_options_short_answer', update_variable_get('node_options_short_amswer', array('status')));
  $config->set('short_answer_default_max_score', update_variable_get('short_answer_default_max_score', 5));
  $config->save();

  // Delete variables.
  update_variable_del('node_options_short_answer');
  update_variable_del('short_answer_default_max_score');
}

/**
 * Implements hook_update_last_removed().
 */
function short_answer_update_last_removed() {
  return 7500;
}

