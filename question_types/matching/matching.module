<?php

/**
 * @file
 * Matching question type for the Quiz module.
 *
 * Allows the creation of matching questions, which associate one term
 * with another.
 */

/**
 * Implements hook_autoload_info().
 *
 * @return string[]
 */
function matching_autoload_info() {
  return array(
    'MatchingQuestion' => 'includes/MatchingQuestion.class.inc',
    'MatchingResponse' => 'includes/MatchingResponse.class.inc',
    'MatchingTestCase' => 'tests/matching.test',
  );
}

/**
 * Implements hook_config_info().
 */
function matching_config_info() {
  $prefixes['matching.settings'] = array(
    'label' => t('Matching Question settings'),
    'group' => t('Matching'),
  );
  return $prefixes;
}

/**
 * Implements hook_quiz_question_info().
 */
function matching_quiz_question_info() {
  return array(
    'matching' => array(
      'name' => t('Matching'),
      'description' => t('Matching question type for quiz module. A question type for the quiz module: allows you to create matching type questions, which connect terms with one another.'),
      'question provider' => 'MatchingQuestion',
      'response provider' => 'MatchingResponse',
      // All wrapper functions are in the quiz_question module.
      'module' => 'quiz_question',
    ),
  );
}

/**
 * Implements hook_quiz_question_config().
 */
function matching_quiz_question_config() {
  $config = config('matching.settings');
  $form['quiz_matching_form_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Match Question Size'),
    '#description' => t('Number of questions allowed to wrap under a matching type question.'),
    '#default_value' => $config->get('quiz_matching_form_size'),
  );
  $form['quiz_matching_shuffle_options'] = array(
    '#type' => 'checkbox',
    '#title' => t('Shuffle Matching Questions'),
    '#default_value' => $config->get('quiz_matching_shuffle_options'),
    '#description' => t('If checked matching questions will be shuffled'),
  );
  $form['#validate'][] = 'matching_config_validate';
  return $form;
}

/**
 * Validate the long_answer config form values.
 */
function matching_config_validate($form, $form_state) {
  if (!_quiz_is_int($form_state['values']['quiz_matching_form_size'], 2, 50)) {
    form_set_error('quiz_matching_form_size', t('The number of questions must be between 2 and 50'));
  }
}

/**
 * Implements hook_theme().
 */
function matching_theme() {
  return array(
    'matching_question_form' => array(
      'render element' => 'form',
      'path' => backdrop_get_path('module', 'matching') . '/theme',
      'file' => 'matching.theme.inc',
    ),
    'matching_response' => array(
      'variables' => array('metadata' => NULL, 'data' => NULL),
      'path' => backdrop_get_path('module', 'matching') . '/theme',
      'file' => 'matching.theme.inc',
    ),
    'matching_subquestion_form' => array(
      'render element' => 'form',
      'path' => backdrop_get_path('module', 'matching') . '/theme',
      'file' => 'matching.theme.inc',
    ),
    'matching_match_node_view' => array(
      'variables' => array('subquestions' => NULL),
      'path' => backdrop_get_path('module', 'matching') . '/theme',
      'file' => 'matching.theme.inc',
    ),
    'matching_answering_form' => array(
      'render element' => 'form',
      'path' => backdrop_get_path('module', 'matching') . '/theme',
      'template' => 'matching-answering-form',
    ),

  );
}

/**
 * Implements hook_field_extra_fields().
 */
function matching_field_extra_fields() {
  $extra['node']['matching'] = array(
    'form' => array(
      'settings' => array(
        'label' => t('Settings'),
        'description' => t('The settings for the matching question.'),
        'weight' => -5,
      ),
      'match' => array(
        'label' => t('Answer'),
        'description' => t('The sets of matches for this question.'),
        'weight' => -4,
      ),
    ),
  );
  return $extra;
}
