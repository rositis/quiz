<?php

/**
 * @file
 * Multiplechoice question type for the Quiz module.
 *
 * Allows the creation of multiplechoice questions, where the user has to
 * pick the right answer from multiple possibilities.
 */

/**
 * Implements hook_autoload_info().
 *
 * @return string[]
 */
function multichoice_autoload_info() {
  return array(
    'MultichoiceQuestion' => 'includes/MultichoiceQuestion.class.inc',
    'MultichoiceResponse' => 'includes/MultichoiceResponse.class.inc',
    'MultichoiceTestCase' => 'tests/multichoice.test',
  );
}

/**
 * Implements hook_config_info().
 */
function multichoice_config_info() {
  $prefixes['multichoice.settings'] = array(
    'label' => t('Multichoice settings'),
    'group' => t('Multichoice'),
  );
  return $prefixes;
}

/**
 * Implements hook_quiz_question_info().
 */
function multichoice_quiz_question_info() {
  return array(
    'multichoice' => array(
      'name' => t('Multiple choice question'),
      'description' => t('This provides multiple choice questions for use by the Quiz module.'),
      'question provider' => 'MultichoiceQuestion',
      'response provider' => 'MultichoiceResponse',
      // All wrapper functions are in the quiz_question module.
      'module' => 'quiz_question',
    ),
  );
}

/**
 * Implements hook_quiz_question_config().
 */
function multichoice_quiz_question_config() {
  $config = config('multichoice.settings');
  $form['multichoice_def_num_of_alts'] = array(
    '#type' => 'textfield',
    '#title' => t('Default number of alternatives'),
    '#default_value' => $config->get('multichoice_def_num_of_alts'),
  );
  $form['multichoice_def_scoring'] = array(
    '#type' => 'radios',
    '#title' => t('Default scoring method'),
    '#description' => t('Choose the default scoring method for questions with multiple correct answers.'),
    '#options' => array(
      0 => t('Give minus one point for incorrect answers'),
      1 => t("Give one point for each incorrect option that haven't been chosen"),
    ),
    '#default_value' => $config->get('multichoice_def_scoring'),
  );
  $form['#validate'][] = 'multichoice_config_validate';
  return $form;
}

/**
 * Validate the multichoice config form values.
 */
function multichoice_config_validate($form, $form_state) {
  if (!_quiz_is_int($form_state['values']['multichoice_def_num_of_alts'], 2, 50)) {
    form_set_error('multichoice_def_num_of_alts', t('The default number of alternatives must be between 2 and 50'));
  }
}

/**
 * Implements hook_theme().
 */
function multichoice_theme($existing, $type, $theme, $path) {
  $path = backdrop_get_path('module', 'multichoice') . '/theme';
  return array(
    'multichoice_creation_form' => array(
      'render element' => 'form',
      'path' => $path,
      'file' => 'multichoice.theme.inc',
    ),
    'multichoice_answer_node_view' => array(
      'variables' => array(
        'alternatives' => NULL,
        'show_correct' => NULL,
      ),
      'path' => $path,
      'file' => 'multichoice.theme.inc',
    ),
    'multichoice_alternative_creation_table' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'multichoice-alternative-creation-table',
    ),
    'multichoice_answering_form' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'multichoice-answering-form',
    ),
    'multichoice_alternative' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'multichoice-alternative',
    ),
  );
}

/**
 * Ajax callback function used when adding alternatives to the node-form.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function multichoice_add_alternative_ajax_callback($form, &$form_state) {
  return $form['alternatives'];
}

/**
 * Implements hook_user_cancel().
 */
function multichoice_user_cancel($edit, $account, $method) {
  db_delete('quiz_multichoice_user_settings')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_field_extra_fields().
 */
function multichoice_field_extra_fields() {
  $extra['node']['multichoice'] = array(
    'form' => array(
      'alternatives' => array(
        'label' => t('Alternatives'),
        'description' => t('Alternatives for multichoice'),
        'weight' => -4,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_views_api().
 */
function multichoice_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'multichoice'),
  );
}

/**
 * AJAX callback function used when removing alternatives from the question edit
 * form.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function multichoice_remove_alternative_ajax_callback($form, &$form_state) {
  return $form['alternatives'];
}

/**
 * AJAX submit handler used when removing alternatives from the question edit
 * form.
 *
 * @param $form
 * @param $form_state
 */
function multichoice_remove_alternative_submit($form, &$form_state) {
  $def_num_of_alts = variable_get('multichoice_def_num_of_alts', 2);
  $choice_count = $form_state['choice_count'];
  if ($choice_count <= $def_num_of_alts) {
    backdrop_set_message(t('Multiple choice must have at least !num alternatives.', array('!num' => $def_num_of_alts)), 'error');
  }
  else {
    $button = $form_state['triggering_element'];
    $delta = $button['#delta'];
    $input = &$form_state['input']['alternatives'];

    // Get IDs of choices and store it in the $input array.
    for ($i = 0; $i < $choice_count; $i++) {
      $input[$i]['id'] = $form_state['node']->alternatives[$i]['id'];
    }

    // Remove alternative by delta and reorder alternatives.
    unset($input[$delta]);
    for ($i = $delta; $i < $choice_count; $i++) {
      $next = $i + 1;
      if (isset($input[$next])) {
        $input[$i] = $input[$next];
      }
      else {
        unset($input[$i]);
      }
    }

    // Update form state.
    $form_state['choice_count'] = $choice_count - 1;
    $form_state['node']->alternatives = $input;
  }
  $form_state['rebuild'] = TRUE;
}
